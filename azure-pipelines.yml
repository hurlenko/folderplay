name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - master
      - develop
  tags:
    include:
      - '*'

jobs:
  - job: build_artifacts
    displayName: 'Build Artifacts'
    strategy:
      matrix:
        mac:
          imageName: 'macos-latest'
          python.version: '3.7'
          python.architecture: 'x64'
        windows64:
          imageName: 'windows-latest'
          python.version: '3.7'
          python.architecture: 'x64'
        windows32:
          imageName: 'windows-latest'
          python.version: '3.7'
          python.architecture: 'x32'

    pool:
      vmImage: '$(imageName)'

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
          architecture: '$(python.architecture)'
        displayName: 'Use Python $(python.version)'

      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
        displayName: 'Install dependencies'

      - script: |
          python -m PyInstaller folderplay.spec
        displayName: 'Build pyinstaller'

      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'drop'
          pathtoPublish: '$(Build.SourcesDirectory)/dist'

  - job: 'version_release'
    displayName: 'Publish new release'
    dependsOn: build_artifacts
    # Release only when new tag is pushed
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

    steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Build Artifacts'
        inputs:
          artifactName: 'drop'
          downloadPath: '$(Build.ArtifactStagingDirectory)'

      - task: GithubRelease@0
        displayName: 'Create Github release'
        inputs:
          gitHubConnection: 'folderplay'
          repositoryName: '$(Build.Repository.Name)'
          action: 'create'
          target: '$(Build.SourceVersion)'
          tagSource: 'auto'
          assets: '$(Build.ArtifactStagingDirectory)/drop/*'
          assetUploadMode: 'replace'
          addChangeLog: true
          isDraft: true

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'
          architecture: 'x64'
        displayName: 'Use Python 3.7'

      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
        displayName: 'Install dependencies'

      - task: TwineAuthenticate@1
        displayName: "Twine Authenticate"
        inputs:
          pythonUploadServiceConnection: "pypi"

      - script: |
          python setup.py sdist bdist_wheel
          python -m twine upload -r "pypi" --config-file $(PYPIRC_PATH) dist/*
        displayName: "Upload new release to PyPI"
