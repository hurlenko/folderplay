name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - master
      - develop
  tags:
    include:
      - '*'

jobs:
  - job: build_artifacts
    displayName: 'Build Artifacts'
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
          python.version: '3.7'
        mac:
          imageName: 'macos-latest'
          python.version: '3.7'
        windows:
          imageName: 'windows-latest'
          python.version: '3.7'

    pool:
      vmImage: '$(imageName)'

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
          architecture: 'x64'
        displayName: 'Use Python $(python.version)'

#      - script: |
#          sudo apt-get update -y
#          sudo apt-get install -y patchelf python3-pyqt5
#          sudo /sbin/ldconfig -v
#          echo kekekke
#          dpkg -S $(/sbin/ldconfig -p | awk 'NR>1 { print $NF }') 2>/dev/null | sed 's/\: .*$//' | sort -u
#          echo "Installed after update"
#          sudo apt list -a --installed "libqt*"
#        condition: eq(variables['Agent.OS'], 'Linux')
#        displayName: 'Install linux dependencies'

      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
        displayName: 'Install dependencies'

      - script: |
          python -m PyInstaller folderplay.spec
        displayName: 'Build pyinstaller'

#      - script: |
#          pip install staticx
#          cd $(Build.SourcesDirectory)/dist
#          FOLDERPLAY=`ls -1 *`
#          TEMPFILE=tmp
#          mv $FOLDERPLAY $TEMPFILE
#          staticx --strip --loglevel=INFO $TEMPFILE $FOLDERPLAY
#        condition: eq(variables['Agent.OS'], 'Linux')
#        displayName: 'Create static linux binary'

      - task: PublishBuildArtifacts@1
        inputs:
          artifactName: 'drop'
          pathtoPublish: '$(Build.SourcesDirectory)/dist'

  - job: 'version_release'
    displayName: 'Create GitHub release'
    dependsOn: build_artifacts
    # Release only when new version is pushed
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

    steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Build Artifacts'
        inputs:
          artifactName: 'drop'
          downloadPath: '$(Build.ArtifactStagingDirectory)'

      - task: GithubRelease@0
        displayName: 'Create release'
        inputs:
          gitHubConnection: 'folderplay'
          repositoryName: '$(Build.Repository.Name)'
          action: 'create'
          target: '$(Build.SourceVersion)'
          tagSource: 'auto'
          assets: '$(Build.ArtifactStagingDirectory)/drop/*'
          assetUploadMode: 'replace'
          addChangeLog: true
          isDraft: true